{"ast":null,"code":"import _toConsumableArray from \"/home/rakesh/Rakesh/nodeJs/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _objectSpread from \"/home/rakesh/Rakesh/nodeJs/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"/home/rakesh/Rakesh/nodeJs/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/rakesh/Rakesh/nodeJs/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/rakesh/Rakesh/nodeJs/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/rakesh/Rakesh/nodeJs/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/rakesh/Rakesh/nodeJs/react-frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/rakesh/Rakesh/nodeJs/react-frontend/src/pages/Feed/Feed.js\";\nimport React, { Component, Fragment } from 'react';\nimport Post from '../../components/Feed/Post/Post';\nimport Button from '../../components/Button/Button';\nimport FeedEdit from '../../components/Feed/FeedEdit/FeedEdit';\nimport Input from '../../components/Form/Input/Input';\nimport Paginator from '../../components/Paginator/Paginator';\nimport Loader from '../../components/Loader/Loader';\nimport ErrorHandler from '../../components/ErrorHandler/ErrorHandler';\nimport './Feed.css';\nimport post from '../../components/Feed/Post/Post';\n\nvar Feed = /*#__PURE__*/function (_Component) {\n  _inherits(Feed, _Component);\n\n  function Feed() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, Feed);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(Feed)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      isEditing: false,\n      posts: [],\n      totalPosts: 0,\n      editPost: null,\n      status: '',\n      postPage: 1,\n      postsLoading: true,\n      editLoading: false\n    };\n\n    _this.loadPosts = function (direction) {\n      if (direction) {\n        _this.setState({\n          postsLoading: true,\n          posts: []\n        });\n      }\n\n      var page = _this.state.postPage;\n      console.log(page, direction);\n\n      if (direction === 'next') {\n        page++;\n\n        _this.setState({\n          postPage: page\n        });\n      }\n\n      if (direction === 'previous') {\n        page--;\n\n        _this.setState({\n          postPage: page\n        });\n      }\n\n      var graphqlQuery = {\n        query: \"\\n        {\\n          posts(page: \".concat(page, \") {\\n            posts{\\n              _id\\n              title\\n              content\\n              creator {\\n                name\\n              }\\n              createdAt\\n            }\\n            totalPosts\\n          }\\n        }\\n      \")\n      };\n      fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer ' + _this.props.token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resData) {\n        if (resData.errors) {\n          throw new Error('Fetch posts failed!!');\n        }\n\n        _this.setState({\n          posts: resData.data.posts.posts.map(function (post) {\n            return _objectSpread({}, post, {\n              imagePath: post.imageUrl\n            });\n          }),\n          totalPosts: resData.data.posts.totalItems,\n          postsLoading: false\n        });\n      }).catch(_this.catchError);\n    };\n\n    _this.statusUpdateHandler = function (event) {\n      event.preventDefault();\n      fetch('URL').then(function (res) {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error(\"Can't update status!\");\n        }\n\n        return res.json();\n      }).then(function (resData) {\n        console.log(resData);\n      }).catch(_this.catchError);\n    };\n\n    _this.newPostHandler = function () {\n      _this.setState({\n        isEditing: true\n      });\n    };\n\n    _this.startEditPostHandler = function (postId) {\n      _this.setState(function (prevState) {\n        var loadedPost = _objectSpread({}, prevState.posts.find(function (p) {\n          return p._id === postId;\n        }));\n\n        return {\n          isEditing: true,\n          editPost: loadedPost\n        };\n      });\n    };\n\n    _this.cancelEditHandler = function () {\n      _this.setState({\n        isEditing: false,\n        editPost: null\n      });\n    };\n\n    _this.finishEditHandler = function (postData) {\n      _this.setState({\n        editLoading: true\n      }); // Set up data (with image!)\n\n\n      var formData = new FormData();\n      formData.append('image', postData.image);\n\n      if (_this.state.editPost) {\n        formData.append('oldPath', _this.state.editPost.imagePath);\n      }\n\n      fetch('http://localhost:8000/post-image', {\n        method: 'PUT',\n        headers: {\n          Authorization: 'Bearer ' + _this.props.token\n        },\n        body: formData\n      }).then(function (res) {\n        return res.json();\n      }).then(function (fileResData) {\n        var imageUrl = fileResData.filePath;\n        var graphqlQuery = {\n          query: \"\\n          mutation {\\n            createPost(postInput: {title:\\\"\".concat(postData.title, \"\\\", content:\\\"\").concat(postData.content, \"\\\", imageUrl:\\\"\").concat(imageUrl, \"\\\" }){\\n              _id\\n              title\\n              content\\n              imageUrl\\n              creator {\\n                name  \\n              }\\n              createdAt\\n            }\\n          }\\n        \")\n        };\n\n        if (_this.state.editPost) {\n          graphqlQuery = {\n            query: \"\\n          mutation {\\n            updatePost(id: \\\"\".concat(_this.state.editPost._id, \"\\\" ,postInput: {title:\\\"\").concat(postData.title, \"\\\", content:\\\"\").concat(postData.content, \"\\\", imageUrl:\\\"\").concat(imageUrl, \"\\\" }){\\n              _id\\n              title\\n              content\\n              imageUrl\\n              creator {\\n                name  \\n              }\\n              createdAt\\n            }\\n          }\\n          \")\n          };\n        }\n\n        return fetch('http://localhost:8000/graphql', {\n          method: 'POST',\n          body: JSON.stringify(graphqlQuery),\n          headers: {\n            Authorization: 'Bearer ' + _this.props.token,\n            'Content-Type': 'application/json'\n          }\n        });\n      }).then(function (res) {\n        console.log(res);\n\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Creating or editing a post failed!');\n        }\n\n        return res.json();\n      }).then(function (resData) {\n        var resDataField = 'createPost';\n\n        if (_this.state.editPost) {\n          resDataField = 'updatePost';\n        }\n\n        var post = {\n          _id: resData.data[resDataField]._id,\n          title: resData.data[resDataField].title,\n          content: resData.data[resDataField].content,\n          creator: resData.data[resDataField].creator,\n          createdAt: resData.data[resDataField].createdAt,\n          imagePath: resData.data[resDataField].imageUrl\n        };\n\n        _this.setState(function (prevState) {\n          var updatedPosts = _toConsumableArray(prevState.posts);\n\n          if (prevState.editPost) {\n            var postIndex = prevState.posts.findIndex(function (p) {\n              return p._id === prevState.editPost._id;\n            });\n            updatedPosts[postIndex] = post;\n          } else {\n            updatedPosts.unshift(post);\n          }\n\n          return {\n            isEditing: false,\n            editPost: null,\n            editLoading: false\n          };\n        });\n      }).catch(function (err) {\n        console.log(err);\n\n        _this.setState({\n          isEditing: false,\n          editPost: null,\n          editLoading: false,\n          error: err\n        });\n      });\n    };\n\n    _this.statusInputChangeHandler = function (input, value) {\n      _this.setState({\n        status: value\n      });\n    };\n\n    _this.deletePostHandler = function (postId) {\n      _this.setState({\n        postsLoading: true\n      });\n\n      var graphqlQuery = {\n        query: \"\\n        mutation {\\n          deletePost(id: \\\"\".concat(postId, \"\\\")\\n        }\\n      \")\n      };\n      fetch('http://localhost:8000/graphql', {\n        method: 'POST',\n        headers: {\n          Authorization: 'Bearer ' + _this.props.token,\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(graphqlQuery)\n      }).then(function (res) {\n        return res.json();\n      }).then(function (resData) {\n        if (resData.errors) {\n          throw new Error('Deleting the post failed!');\n        }\n\n        console.log(resData);\n\n        _this.loadPosts(); // this.setState(prevState => {\n        //   const updatedPosts = prevState.posts.filter(p => p._id !== postId);\n        //   return { posts: updatedPosts, postsLoading: false };\n        // });\n\n      }).catch(function (err) {\n        console.log(err);\n\n        _this.setState({\n          postsLoading: false\n        });\n      });\n    };\n\n    _this.errorHandler = function () {\n      _this.setState({\n        error: null\n      });\n    };\n\n    _this.catchError = function (error) {\n      _this.setState({\n        error: error\n      });\n    };\n\n    return _this;\n  }\n\n  _createClass(Feed, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      var _this2 = this;\n\n      fetch('URL').then(function (res) {\n        if (res.status !== 200) {\n          throw new Error('Failed to fetch user status.');\n        }\n\n        return res.json();\n      }).then(function (resData) {\n        _this2.setState({\n          status: resData.status\n        });\n      }).catch(this.catchError);\n      this.loadPosts();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      return /*#__PURE__*/React.createElement(Fragment, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 298,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(ErrorHandler, {\n        error: this.state.error,\n        onHandle: this.errorHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 299,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(FeedEdit, {\n        editing: this.state.isEditing,\n        selectedPost: this.state.editPost,\n        loading: this.state.editLoading,\n        onCancelEdit: this.cancelEditHandler,\n        onFinishEdit: this.finishEditHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 300,\n          columnNumber: 9\n        }\n      }), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"feed__status\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 307,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"form\", {\n        onSubmit: this.statusUpdateHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 308,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(Input, {\n        type: \"text\",\n        placeholder: \"Your status\",\n        control: \"input\",\n        onChange: this.statusInputChangeHandler,\n        value: this.state.status,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 309,\n          columnNumber: 13\n        }\n      }), /*#__PURE__*/React.createElement(Button, {\n        mode: \"flat\",\n        type: \"submit\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }\n      }, \"Update\"))), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"feed__control\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(Button, {\n        mode: \"raised\",\n        design: \"accent\",\n        onClick: this.newPostHandler,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 322,\n          columnNumber: 11\n        }\n      }, \"New Post\")), /*#__PURE__*/React.createElement(\"section\", {\n        className: \"feed\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 9\n        }\n      }, this.state.postsLoading && /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          textAlign: 'center',\n          marginTop: '2rem'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 328,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Loader, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 329,\n          columnNumber: 15\n        }\n      })), this.state.posts.length <= 0 && !this.state.postsLoading ? /*#__PURE__*/React.createElement(\"p\", {\n        style: {\n          textAlign: 'center'\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 333,\n          columnNumber: 13\n        }\n      }, \"No posts found.\") : null, !this.state.postsLoading && /*#__PURE__*/React.createElement(Paginator, {\n        onPrevious: this.loadPosts.bind(this, 'previous'),\n        onNext: this.loadPosts.bind(this, 'next'),\n        lastPage: Math.ceil(this.state.totalPosts / 2),\n        currentPage: this.state.postPage,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 336,\n          columnNumber: 13\n        }\n      }, this.state.posts.map(function (post) {\n        return /*#__PURE__*/React.createElement(Post, {\n          key: post._id,\n          id: post._id,\n          author: post.creator.name,\n          date: new Date(post.createdAt).toLocaleDateString('en-US'),\n          title: post.title,\n          image: post.imageUrl,\n          content: post.content,\n          onStartEdit: _this3.startEditPostHandler.bind(_this3, post._id),\n          onDelete: _this3.deletePostHandler.bind(_this3, post._id),\n          __self: _this3,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 343,\n            columnNumber: 17\n          }\n        });\n      }))));\n    }\n  }]);\n\n  return Feed;\n}(Component);\n\nexport default Feed;","map":{"version":3,"sources":["/home/rakesh/Rakesh/nodeJs/react-frontend/src/pages/Feed/Feed.js"],"names":["React","Component","Fragment","Post","Button","FeedEdit","Input","Paginator","Loader","ErrorHandler","post","Feed","state","isEditing","posts","totalPosts","editPost","status","postPage","postsLoading","editLoading","loadPosts","direction","setState","page","console","log","graphqlQuery","query","fetch","method","headers","Authorization","props","token","body","JSON","stringify","then","res","json","resData","errors","Error","data","map","imagePath","imageUrl","totalItems","catch","catchError","statusUpdateHandler","event","preventDefault","newPostHandler","startEditPostHandler","postId","prevState","loadedPost","find","p","_id","cancelEditHandler","finishEditHandler","postData","formData","FormData","append","image","fileResData","filePath","title","content","resDataField","creator","createdAt","updatedPosts","postIndex","findIndex","unshift","err","error","statusInputChangeHandler","input","value","deletePostHandler","errorHandler","textAlign","marginTop","length","bind","Math","ceil","name","Date","toLocaleDateString"],"mappings":"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","sourcesContent":["import React, { Component, Fragment } from 'react';\nimport Post from '../../components/Feed/Post/Post';\nimport Button from '../../components/Button/Button';\nimport FeedEdit from '../../components/Feed/FeedEdit/FeedEdit';\nimport Input from '../../components/Form/Input/Input';\nimport Paginator from '../../components/Paginator/Paginator';\nimport Loader from '../../components/Loader/Loader';\nimport ErrorHandler from '../../components/ErrorHandler/ErrorHandler';\nimport './Feed.css';\nimport post from '../../components/Feed/Post/Post';\n\nclass Feed extends Component {\n  state = {\n    isEditing: false,\n    posts: [],\n    totalPosts: 0,\n    editPost: null,\n    status: '',\n    postPage: 1,\n    postsLoading: true,\n    editLoading: false\n  };\n\n  componentDidMount() {\n    fetch('URL')\n      .then(res => {\n        if (res.status !== 200) {\n          throw new Error('Failed to fetch user status.');\n        }\n        return res.json();\n      })\n      .then(resData => {\n        this.setState({ status: resData.status });\n      })\n      .catch(this.catchError);\n\n    this.loadPosts();\n  }\n\n\n  loadPosts = direction => {\n    if (direction) {\n      this.setState({ postsLoading: true, posts: [] });\n    }\n    let page = this.state.postPage;\n    console.log(page, direction);\n    if (direction === 'next') {\n      page++;\n      this.setState({ postPage: page });\n    }\n    if (direction === 'previous') {\n      page--;\n      this.setState({ postPage: page });\n    }\n    const graphqlQuery = {\n      query: `\n        {\n          posts(page: ${page}) {\n            posts{\n              _id\n              title\n              content\n              creator {\n                name\n              }\n              createdAt\n            }\n            totalPosts\n          }\n        }\n      `\n    }\n    fetch('http://localhost:8000/graphql',{\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(graphqlQuery)\n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(resData => {\n        if (resData.errors) {\n          throw new Error('Fetch posts failed!!');\n        }\n        this.setState({\n          posts: resData.data.posts.posts.map(post => {\n            return {\n                ...post, imagePath: post.imageUrl\n            }\n          }),\n          totalPosts: resData.data.posts.totalItems,\n          postsLoading: false\n        });\n      })\n      .catch(this.catchError);\n  };\n\n  statusUpdateHandler = event => {\n    event.preventDefault();\n    fetch('URL')\n      .then(res => {\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error(\"Can't update status!\");\n        }\n        return res.json();\n      })\n      .then(resData => {\n        console.log(resData);\n      })\n      .catch(this.catchError);\n  };\n\n  newPostHandler = () => {\n    this.setState({ isEditing: true });\n  };\n\n  startEditPostHandler = postId => {\n    this.setState(prevState => {\n      const loadedPost = { ...prevState.posts.find(p => p._id === postId) };\n\n      return {\n        isEditing: true,\n        editPost: loadedPost\n      };\n    });\n  };\n\n  cancelEditHandler = () => {\n    this.setState({ isEditing: false, editPost: null });\n  };\n\n  finishEditHandler = postData => {\n    this.setState({\n      editLoading: true\n    });\n    // Set up data (with image!)\n    const formData = new FormData();\n    formData.append('image', postData.image);\n    if (this.state.editPost) {\n      formData.append('oldPath', this.state.editPost.imagePath);\n    }\n    fetch('http://localhost:8000/post-image', {\n      method: 'PUT',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token,\n      },\n      body: formData\n    })\n    .then(res => res.json())\n    .then(fileResData => {\n      const imageUrl = fileResData.filePath;\n      let graphqlQuery = {\n        query: `\n          mutation {\n            createPost(postInput: {title:\"${postData.title}\", content:\"${postData.content}\", imageUrl:\"${imageUrl}\" }){\n              _id\n              title\n              content\n              imageUrl\n              creator {\n                name  \n              }\n              createdAt\n            }\n          }\n        `\n      };\n      if (this.state.editPost){\n        graphqlQuery = {\n          query: `\n          mutation {\n            updatePost(id: \"${ this.state.editPost._id}\" ,postInput: {title:\"${postData.title}\", content:\"${postData.content}\", imageUrl:\"${imageUrl}\" }){\n              _id\n              title\n              content\n              imageUrl\n              creator {\n                name  \n              }\n              createdAt\n            }\n          }\n          `\n        }\n      }\n      return fetch('http://localhost:8000/graphql',{\n        method: 'POST',\n        body: JSON.stringify(graphqlQuery),\n        headers: {\n          Authorization: 'Bearer ' + this.props.token,\n          'Content-Type': 'application/json'\n        }      \n      })\n      })\n      .then(res => {\n        console.log(res);\n        if (res.status !== 200 && res.status !== 201) {\n          throw new Error('Creating or editing a post failed!');\n        }\n\n        return res.json();\n      })\n      .then(resData => {\n        let resDataField = 'createPost';\n        if (this.state.editPost){\n          resDataField= 'updatePost'; \n        }\n        const post = {\n          _id: resData.data[resDataField]._id,\n          title: resData.data[resDataField].title,\n          content: resData.data[resDataField].content,\n          creator: resData.data[resDataField].creator,\n          createdAt: resData.data[resDataField].createdAt,\n          imagePath: resData.data[resDataField].imageUrl\n        };\n        this.setState(prevState => {\n          let updatedPosts = [...prevState.posts];\n          if (prevState.editPost) {\n            const postIndex = prevState.posts.findIndex(\n              p => p._id === prevState.editPost._id\n            );\n            updatedPosts[postIndex] = post;\n          } else {\n            updatedPosts.unshift(post);\n          }          \n          return {\n            isEditing: false,\n            editPost: null,\n            editLoading: false\n          };\n        });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({\n          isEditing: false,\n          editPost: null,\n          editLoading: false,\n          error: err\n        });\n      });\n  };\n\n  statusInputChangeHandler = (input, value) => {\n    this.setState({ status: value });\n  };\n  deletePostHandler = postId => {\n    this.setState({ postsLoading: true });\n    const graphqlQuery = {\n      query: `\n        mutation {\n          deletePost(id: \"${postId}\")\n        }\n      `\n    };\n    fetch('http://localhost:8000/graphql' ,{\n      method: 'POST',\n      headers: {\n        Authorization: 'Bearer ' + this.props.token,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(graphqlQuery)      \n    })\n      .then(res => {\n        return res.json();\n      })\n      .then(resData => {\n        if (resData.errors){\n          throw new Error('Deleting the post failed!');\n          \n        }\n        console.log(resData);\n        this.loadPosts();\n        // this.setState(prevState => {\n        //   const updatedPosts = prevState.posts.filter(p => p._id !== postId);\n        //   return { posts: updatedPosts, postsLoading: false };\n        // });\n      })\n      .catch(err => {\n        console.log(err);\n        this.setState({ postsLoading: false });\n      });\n  };\n\n  errorHandler = () => {\n    this.setState({ error: null });\n  };\n\n  catchError = error => {\n    this.setState({ error: error });\n  };\n\n  render() {\n    return (\n      <Fragment>\n        <ErrorHandler error={this.state.error} onHandle={this.errorHandler} />\n        <FeedEdit\n          editing={this.state.isEditing}\n          selectedPost={this.state.editPost}\n          loading={this.state.editLoading}\n          onCancelEdit={this.cancelEditHandler}\n          onFinishEdit={this.finishEditHandler}\n        />\n        <section className=\"feed__status\">\n          <form onSubmit={this.statusUpdateHandler}>\n            <Input\n              type=\"text\"\n              placeholder=\"Your status\"\n              control=\"input\"\n              onChange={this.statusInputChangeHandler}\n              value={this.state.status}\n            />\n            <Button mode=\"flat\" type=\"submit\">\n              Update\n            </Button>\n          </form>\n        </section>\n        <section className=\"feed__control\">\n          <Button mode=\"raised\" design=\"accent\" onClick={this.newPostHandler}>\n            New Post\n          </Button>\n        </section>\n        <section className=\"feed\">\n          {this.state.postsLoading && (\n            <div style={{ textAlign: 'center', marginTop: '2rem' }}>\n              <Loader />\n            </div>\n          )}\n          {this.state.posts.length <= 0 && !this.state.postsLoading ? (\n            <p style={{ textAlign: 'center' }}>No posts found.</p>\n          ) : null}\n          {!this.state.postsLoading && (\n            <Paginator\n              onPrevious={this.loadPosts.bind(this, 'previous')}\n              onNext={this.loadPosts.bind(this, 'next')}\n              lastPage={Math.ceil(this.state.totalPosts / 2)}\n              currentPage={this.state.postPage}\n            >\n              {this.state.posts.map(post => (\n                <Post\n                  key={post._id}\n                  id={post._id}\n                  author={post.creator.name}\n                  date={new Date(post.createdAt).toLocaleDateString('en-US')}\n                  title={post.title}\n                  image={post.imageUrl}\n                  content={post.content}\n                  onStartEdit={this.startEditPostHandler.bind(this, post._id)}\n                  onDelete={this.deletePostHandler.bind(this, post._id)}\n                />\n              ))}\n            </Paginator>\n          )}\n        </section>\n      </Fragment>\n    );\n  }\n}\n\nexport default Feed;\n"]},"metadata":{},"sourceType":"module"}